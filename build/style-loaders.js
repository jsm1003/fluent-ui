const path = require('path');
const ExtractTextPlugin = require('extract-text-webpack-plugin');

const config = require('./config');
const { resolve } = require('./utils');

// 目前 typings 文件触发时机不明
const typingsForCssModulesLoaderConf = {
  loader: 'typings-for-css-modules-loader',
  options: {
    //  编写组件的话，应该把 css 的 hash 值去掉
    localIdentName: '[local]',
    modules: true,
    namedExport: true,
    camelCase: true,
    sass: true,
    sourceMap: false,
    slient: true,
    banner: '// This file is automatically generated, do not edit it.',
  },
};

function getLoadingWithoutSourceMap(loader) {
  return {
    loader,
    options: { sourceMap: false },
  };
}

module.exports = config.extractCss
  ? [
      {
        test: /\.css$/,
        include: [resolve('node_modules')],
        use: ExtractTextPlugin.extract({
          // 提取不成功的话将 css 以 style 标签形式插入进来
          fallback: 'style-loader',
          use: [getLoadingWithoutSourceMap('css-loader')],
        }),
      },
      {
        test: /\.css$/,
        include: [resolve('src')],
        use: ExtractTextPlugin.extract({
          fallback: 'style-loader',
          use: ['css-loader', getLoadingWithoutSourceMap('postcss-loader')],
        }),
      },
      {
        test: /\.scss$/,
        //   include: resolve('src/styles'),
        include: [resolve('src')],
        use: ExtractTextPlugin.extract({
          fallback: 'style-loader',
          use: [
            getLoadingWithoutSourceMap('css-loader'),
            getLoadingWithoutSourceMap('postcss-loader'),
            'cache-loader',
            {
              loader: 'thread-loader',
              options: {
                workerParallelJobs: 2,
              },
            },
            getLoadingWithoutSourceMap('sass-loader'),
          ],
        }),
      },
    ]
  : [
      {
        test: /\.css$/,
        include: [resolve('node_modules')],
        use: ['style-loader', 'css-loader'],
      },
      {
        test: /\.css$/,
        include: [resolve('src')],
        use: [
          'style-loader',
          typingsForCssModulesLoaderConf,
          { loader: 'postcss-loader' },
        ],
      },
      {
        test: /\.scss$/,
        include: resolve('src'),
        rules: [
          {
            use: [
              {
                loader: 'style-loader',
                options: {
                  sourceMap: true,
                },
              },
              typingsForCssModulesLoaderConf,
              {
                loader: 'postcss-loader',
                options: {
                  sourceMap: true,
                },
              },
              {
                loader: 'sass-loader',
                options: {
                  outputStyle: 'expanded',
                  sourceMap: true,
                },
              },
            ],
          },
        ],
      },
    ];

// style-loader 只是把 css 文件放到 style 标签中、
// extract-text-webpack-plugin 会将 style 中的 css 文件以 link 的方式引入
// 在 use 的 loader 中， 他是倒序按照 loader 的顺序处理的
// typings-for-css-modules-loader 是在 css-loader 上面包装了一层
/**
 * e.g.
 * ['style-loader', 'css-loader', 'postcss-loader', 'sass-loader']
 */
